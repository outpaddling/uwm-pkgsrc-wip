# $NetBSD$
#
###########################################################
#                  Generated by fbsd2pkg                  #
#              Tue Apr  4 08:51:21 CDT 2017               #
###########################################################

###########################################################
# Unconverted and partially converted FreeBSD port syntax:

#LICENSE_FILE=	${WRKSRC}/LICENSE
#USE_LDCONFIG=	yes
#OPTIONS_DEFINE=		DYNAMIC_ARCH INTERFACE64 OPENMP AVX AVX2
#DYNAMIC_ARCH_DESC=	Support multiple CPU types on i386 and amd64
#INTERFACE64_DESC=	Use 8 byte integers on 64-bit architectures
#OPENMP_DESC=		Use OpenMP for threading
#AVX_DESC=		Support Advanced Vector Extensions (AVX)
#AVX2_DESC=		Support Advanced Vector Extensions 2 (AVX2)
#.if defined(BATCH) || defined(PACKAGE_BUILDING)
#OPTIONS_DEFAULT=	DYNAMIC_ARCH
#.endif
#.include <bsd.port.options.mk>
#.if defined(TARGET_CPU_ARCH)
#BUILDFLAGS+=	TARGET=${TARGET_CPU_ARCH}
#.endif
#MAXTHREADS?=	8
#BUILDFLAGS_THREAD+=	NUM_THREADS=${MAXTHREADS} USE_THREAD=1
#.if ${ARCH:M*64} == ""
#BUILDFLAGS+=	BINARY32=1
#.else
#BUILDFLAGS+=	BINARY64=1
#.endif
#.if ! ( ${PORT_OPTIONS:MDYNAMIC_ARCH} && ( ${ARCH} == "amd64" || ${ARCH} == "i386" ) )
#MANUAL_PACKAGE_BUILD=	Optimizes for the build machine.
#.endif
#.if ${PORT_OPTIONS:MDYNAMIC_ARCH}
#BUILDFLAGS+=	DYNAMIC_ARCH=1
#.endif
#.if ${PORT_OPTIONS:MINTERFACE64}
#BUILDFLAGS+=	INTERFACE64=1
#.endif
#.if ${PORT_OPTIONS:MOPENMP}
#BUILDFLAGS_THREAD+=	USE_OPENMP=1
#.endif
#.if ! ${PORT_OPTIONS:MAVX}
#BUILDFLAGS+=	NO_AVX=1
#.endif
#.if ! ${PORT_OPTIONS:MAVX2}
#BUILDFLAGS+=	NO_AVX2=1
#.endif

OPENBLAS_SUFX=	r${PORTVERSION}
OPENBLAS_LIBS=	libopenblas libopenblasp
OPENBLAS_SVER=	0
OPENBLAS_FILES=	${OPENBLAS_LIBS:S|$|.so|} ${OPENBLAS_LIBS:S|$|.so.${OPENBLAS_SVER}|} ${OPENBLAS_LIBS:S|$|.a|}

# Best guess translation of REINPLACE above.  Replace 1 with a
# meaningful name.  Assuming post-patch: Change if necessary.
# FIXME: Set a portable REINPLACE_CMD
REINPLACE_CMD=		sed
SUBST_CLASSES+=		find
SUBST_STAGE.find=	post-patch
SUBST_SED.find+=	-e "s+%%FIND%%+${FIND}+"
SUBST_SED.find+=	-e "s+%%XARGS%%+${XARGS}+"
SUBST_SED.find+=	-e "s+%%REINPLACE_CMD%%+${REINPLACE_CMD}+"
SUBST_FILES.find+=	${WRKSRC}/Makefile

# 	${REINPLACE_CMD} -e "s+%%FC%%+${FC}+" -e "s+%%CC%%+${CC}+" \
# 		${WRKSRC}/Makefile.rule

# Best guess translation of REINPLACE above.  Replace 2 with a
# meaningful name.  Assuming post-patch: Change if necessary.
SUBST_CLASSES+=		comp
SUBST_STAGE.comp=	post-patch
SUBST_SED.comp+=	-e "s+%%FC%%+${FC}+"
SUBST_SED.comp+=	-e "s+%%CC%%+${CC}+"
SUBST_FILES.comp+=	${WRKSRC}/Makefile.rule

# 	${REINPLACE_CMD} -e "s+(ARCH)+(ARCH_)+" \
# 		${WRKSRC}/Makefile.rule \
# 		${WRKSRC}/Makefile.tail \
# 		${WRKSRC}/driver/level3/Makefile \
# 		${WRKSRC}/driver/others/Makefile \
# 		${WRKSRC}/exports/Makefile \
# 		${WRKSRC}/interface/Makefile \
# 		${WRKSRC}/kernel/Makefile \
# 		${WRKSRC}/kernel/Makefile.L3 \
# 		${WRKSRC}/lapack/laswp/Makefile \
# 		${WRKSRC}/lapack-netlib/SRC/Makefile \
# 		${WRKSRC}/lapack-netlib/SRC/VARIANTS/Makefile \
# 		${WRKSRC}/lapack-netlib/TESTING/MATGEN/Makefile \
# 		${WRKSRC}/lapack-netlib/LAPACKE/src/Makefile \
# 		${WRKSRC}/lapack-netlib/LAPACKE/utils/Makefile \
# 		${WRKSRC}/reference/Makefile

# Best guess translation of REINPLACE above.  Replace 3 with a
# meaningful name.  Assuming post-patch: Change if necessary.
SUBST_CLASSES+=		arch
SUBST_STAGE.arch=	post-patch
SUBST_SED.arch+=	-e "s+(ARCH)+(ARCH_)+"
SUBST_FILES.arch+=	${WRKSRC}/Makefile.rule
SUBST_FILES.arch+=	${WRKSRC}/Makefile.tail
SUBST_FILES.arch+=	${WRKSRC}/driver/level3/Makefile
SUBST_FILES.arch+=	${WRKSRC}/driver/others/Makefile
SUBST_FILES.arch+=	${WRKSRC}/exports/Makefile
SUBST_FILES.arch+=	${WRKSRC}/interface/Makefile
SUBST_FILES.arch+=	${WRKSRC}/kernel/Makefile
SUBST_FILES.arch+=	${WRKSRC}/kernel/Makefile.L3
SUBST_FILES.arch+=	${WRKSRC}/lapack/laswp/Makefile
SUBST_FILES.arch+=	${WRKSRC}/lapack-netlib/SRC/Makefile
SUBST_FILES.arch+=	${WRKSRC}/lapack-netlib/SRC/VARIANTS/Makefile
SUBST_FILES.arch+=	${WRKSRC}/lapack-netlib/TESTING/MATGEN/Makefile
SUBST_FILES.arch+=	${WRKSRC}/lapack-netlib/LAPACKE/src/Makefile
SUBST_FILES.arch+=	${WRKSRC}/lapack-netlib/LAPACKE/utils/Makefile
SUBST_FILES.arch+=	${WRKSRC}/reference/Makefile

# 	${REINPLACE_CMD} -e "s+(ARCH)+(ARCH_)+" \
# 	-e 's+%%LDFLAGS%%+${LDFLAGS}+' \
# 	-e 's+%%LOCALBASE%%+${LOCALBASE}+' \
# 	-e 's+%%FIND%%+${FIND}+' \
# 	-e 's+%%XARGS%%+${XARGS}+' \
# 	-e 's+%%REINPLACE_CMD%%+${REINPLACE_CMD}+' \
# 	-e 's+$${CROSS_SUFFIX}+${LOCALBASE}/bin/+' \
# 	-e '/Clang.*OpenMP/g' \
# 		${WRKSRC}/Makefile.system

# Best guess translation of REINPLACE above.  Replace 4 with a
# meaningful name.  Assuming post-patch: Change if necessary.
SUBST_CLASSES+=		omp
SUBST_STAGE.omp=	post-patch
SUBST_SED.omp+=	-e "s+(ARCH)+(ARCH_)+"
SUBST_SED.omp+=	-e 's+%%LDFLAGS%%+${LDFLAGS}+'
SUBST_SED.omp+=	-e 's+%%LOCALBASE%%+${LOCALBASE}+'
SUBST_SED.omp+=	-e 's+%%FIND%%+${FIND}+'
SUBST_SED.omp+=	-e 's+%%XARGS%%+${XARGS}+'
SUBST_SED.omp+=	-e 's+%%REINPLACE_CMD%%+${REINPLACE_CMD}+'
SUBST_SED.omp+=	-e 's+$${CROSS_SUFFIX}+${LOCALBASE}/bin/+'
SUBST_SED.omp+=	-e '/Clang.*OpenMP/g'
SUBST_FILES.omp+=	${WRKSRC}/Makefile.system

#.if ${PORT_OPTIONS:MOPENMP}
# 	${REINPLACE_CMD} -e "s+OPENBLAS_NUM_THREADS+OMP_NUM_THREADS+g" \
# 		${WRKSRC}/test/Makefile \
# 		${WRKSRC}/ctest/Makefile

# Best guess translation of REINPLACE above.  Replace 5 with a
# meaningful name.  Assuming post-patch: Change if necessary.
SUBST_CLASSES+=		thread
SUBST_STAGE.thread=	post-patch
SUBST_SED.thread+=	-e "s+OPENBLAS_NUM_THREADS+OMP_NUM_THREADS+g"
SUBST_FILES.thread+=	${WRKSRC}/test/Makefile
SUBST_FILES.thread+=	${WRKSRC}/ctest/Makefile

#.endif
#BENCHMARK_MAXTHREADS?=	${MAXTHREADS}
#.if ${PORT_OPTIONS:MOPENMP}
#BENCHMARK_THREADS_FLAG=		OMP_NUM_THREADS=${BENCHMARK_MAXTHREADS}
#.else
#BENCHMARK_THREADS_FLAG=		OPENBLAS_NUM_THREADS=${BENCHMARK_MAXTHREADS}
#.endif
#benchmark: build
#	cd ${WRKSRC} ; ${SETENV} ${BUILDFLAGS} NUM_THREADS=${MAXTHREADS} \
#	USE_THREAD=1 ${MAKE} ${MAKE_ARGS} hpl
#	cd ${WRKSRC}/benchmark ; ${SETENV} ${BUILDFLAGS} NUM_THREADS=${MAXTHREADS} \
#	USE_THREAD=1 ${BENCHMARK_THREADS_FLAG} ${MAKE} ${MAKE_ARGS}
DISTNAME=	openblas-${PORTVERSION}

PKGNAME=	openblas-${PORTVERSION}
DIST_SUBDIR=	openblas
CATEGORIES=	math
MASTER_SITES=	${MASTER_SITE_GITHUB:=xianyi/} \
		https://www.netlib.org/lapack/timing/
DISTFILES=	${DISTNAME}${EXTRACT_SUFX} ${LARGE_FILE} ${TIMING_FILE}
GITHUB_PROJECT=	OpenBLAS
GITHUB_TAG=	v${PORTVERSION}

MAINTAINER=	bacon4000@gmail.com
HOMEPAGE=	https://github.com/xianyi/OpenBLAS
COMMENT=	Optimized BLAS library based on GotoBLAS2
# Check this
LICENSE=	modified-bsd

# Test and change if necessary.
# MAKE_JOBS_SAFE=	no

# Just assuming C and C++: Adjust this!
USE_LANGUAGES=	c c++ fortran
USE_TOOLS+=	gmake perl:build

CFLAGS=		-fopenmp 

CXXFLAGS=	-fopenmp 

FFLAGS=		-fopenmp 

PORTVERSION=	0.2.19

LARGE_FILE=	large.tgz
TIMING_FILE=	timing.tgz

# Sets OPSYS, OS_VERSION, MACHINE_ARCH, etc..
# .include "../../mk/bsd.prefs.mk"

# Keep this if there are user-selectable options.
# .include "options.mk"

# Specify which directories to create before install.
# You should only need this if using your own install target.
INSTALLATION_DIRS=	bin include lib ${PKGMANDIR}/man1 share/doc share/examples

post-extract:
	cd ${DISTDIR}/${DIST_SUBDIR} ; \
	${CP} ${LARGE_FILE} ${TIMING_FILE} ${WRKSRC}
	${MKDIR} ${WRKDIR}/lib

do-build:
	cd ${WRKSRC} ; ${SETENV} ${BUILDFLAGS} NUM_THREADS=1 USE_THREAD=0 \
	${MAKE} ${MAKE_ARGS}
	${CP} ${WRKSRC}/libopenblas-${OPENBLAS_SUFX}.a ${WRKDIR}/lib/libopenblas.a
	${CP} ${WRKSRC}/libopenblas-${OPENBLAS_SUFX}.so ${WRKDIR}/lib/libopenblas.so.${OPENBLAS_SVER}
	cd ${WRKSRC} ; ${MAKE} ${MAKE_ARGS} clean
	cd ${WRKSRC} ; ${SETENV} ${BUILDFLAGS} ${BUILDFLAGS_THREAD} \
	${MAKE} ${MAKE_ARGS}
	${CP} ${WRKSRC}/libopenblasp-${OPENBLAS_SUFX}.a ${WRKDIR}/lib/libopenblasp.a
	${CP} ${WRKSRC}/libopenblasp-${OPENBLAS_SUFX}.so ${WRKDIR}/lib/libopenblasp.so.${OPENBLAS_SVER}

do-install:
.for L in ${OPENBLAS_LIBS}
	${INSTALL_DATA} ${WRKDIR}/lib/${L}.a ${DESTDIR}${PREFIX}/lib
	${INSTALL_LIB} ${WRKDIR}/lib/${L}.so.${OPENBLAS_SVER} ${DESTDIR}${PREFIX}/lib
	${LN} -sf ${L}.so.${OPENBLAS_SVER} ${DESTDIR}${PREFIX}/lib/${L}.so
.endfor

# Linux doesn't have zlib in the base, so just in case...
# .include "../../devel/zlib/buildlink3.mk"
.include "../../mk/bsd.pkg.mk"
